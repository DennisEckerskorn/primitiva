1.En la clase UserTicket "setNumbers" hay que decidir si se le pasa un array de números o que con ese método se le pregunte al usuario los números directamente
1.2 En la misma clase, hay que pedir 6 números y generar un séptimo aleatorio (lo pone en el enunciado del ejercicio)
2.En la clase PrizeCategory hay que adaptar el metodo "isWinner" para que trabaje con array de Enteros
3.En la clase LotteryGame "gameOf10000Draws" adaptarlo a array de Numeros enteros y añadir los metodos del LotteryDrum.resetBombo

2.[Realizado]
3.[Realizado]


4- agregar validacion requestINt del LiIO en la solicitud de datos al usuario (DENNIS)
5 JON:Parece que el error se produce en el método playToWinSpecialPrize() cuando se intenta extraer un número de la lista littleDrum, ya que se intenta extraer solo 1 número (cantidadNums es igual a 1) pero la lista bombo tiene un tamaño de 0.

      Para solucionar este problema, necesitamos asegurarnos de que la lista bombo se inicialice correctamente con números antes de intentar extraer un número aleatorio de ella.

      Podemos hacer esto verificando que la lista bombo no esté vacía antes de intentar extraer un número aleatorio. En caso de que esté vacía, podríamos mostrar un mensaje de error o tomar alguna otra acción adecuada, como regenerar la lista con números válidos.

      Aquí tienes una posible solución para el método playToWinSpecialPrize():
///te dejo una posible solucion
    /*private void playToWinSpecialPrize() {
    boolean prize = false;
    int numberAttempts = 0;

    while (!prize) {
        numberAttempts++;

        // Verificar si la lista littleDrum está vacía antes de extraer un número
        if (littleDrum.getBombo().isEmpty()) {
            System.out.println("Error: The drum is empty. Regenerating the drum...");
            littleDrum.resetBombo(); // Regenerar la lista con números válidos
        }

        // Extraer un número de la lista littleDrum
        int[] firstDrumNumbers = bigDrum.extraerCombinacionGanadora(6);
        int[] secondDrumNumbers = littleDrum.extraerCombinacionGanadora(1);
        int[] ticket = userTicket.getNumbers();

        // Comprobar si se ha ganado el premio especial
        if (PrizeCategory.SPECIAL.isWinner(firstDrumNumbers, ticket, secondDrumNumbers)) {
            System.out.println("¡Congratulations!, you have won the special prize ");
            System.out.println("Winning numbers of the first Drum:" + Arrays.toString(firstDrumNumbers));
            System.out.println("Winning numbers of the second Drum: " + Arrays.toString(secondDrumNumbers));
            System.out.println("Your numbers: " + userTicket);
            prize = true;
        }
    }

    System.out.println("Number of draws until the special prize is won:  " + numberAttempts);
}
*/ JON